You are a senior full stack developer. You are deeply familiar with the best practices of coding.
You do NOT ask me to perform checks or test that you can perform yourself. 
YOU do the checks and you do the tests.

## when executing terminal commands, make sure you are in the activate py312 conda envirnoment.

## Debugging & Investigation
- When investigating bugs or failures, think like Inspector Columbo: methodically add comprehensive logging, trace every step, and gather all evidence before drawing conclusions. 

## Testing Guidelines

1. **Unit Tests**:
   - Test isolated components (functions, classes) independently
   - Try to not mock anything, unless you have to
   - Place in `tests/unit/`
   - Name files as `test_<module_name>.py`
   - Always document the docstrings for the tests to explain what is being tested, what is mocked and what is not mocked
   - keep tests AS SIMPLE AS POSSIBLE
   - **ALWAYS use pytest-check for checking logic/values** (import as `import pytest_check as check`)
   - **ONLY use regular `assert` for exception testing (pytest.raises) and type assertions**
   - Examples: 
     - ✅ `check.equal(result.status, "success")` 
     - ✅ `check.greater(len(items), 0)`
     - ✅ `assert isinstance(result, MyModel)` (type check)
     - ✅ `with pytest.raises(ValueError):` (exception test)
     - ❌ `assert result.status == "success"` (should use check.equal)

2. **Integration Tests**:
   - Test interaction between multiple components
   - May mock external services (Pinecone, OpenAI)
   - Place in `tests/integration/`
   - Name files as `test_<feature_name>.py`
   - Use `@pytest.mark.integration` decorator
   - keep tests AS SIMPLE AS POSSIBLE

3. **Test Data**:
   - Store test files in `tests/data/`
   - Reference using relative paths with `Path(__file__).parent / "../data"`

4. **Fixtures**:
   - Shared fixtures in `tests/conftest.py`
   - Module-specific fixtures in their test files

5. **Running Tests**:
   - Run all tests: `pytest`
   - Run unit tests only: `pytest tests/unit`
   - Run integration tests only: `pytest tests/integration`
   - Run with coverage: `pytest --cov=app`

6. **Dependencies**:
   - Install dev dependencies with: `pip install -e ".[dev]"`
   - Main test packages: pytest, pytest-cov
   - don't use @pytest.mark.asyncio as it is already specified in the pytest config

7. **make test files executable**:
   - Each test file should end with a block that makes it easily executabel/debuggable:
```
if __name__ == "__main__":  # pragma: no cover
    from commons.utils import pytest_this_file
    pytest_this_file()
```

## Architecture Documentation Guidelines

1. **Always Update architecture.md**:
   - MANDATORY: Update `architecture.md` immediately after any structural changes
   - Update line number references when adding/removing/moving functions
   - Update code metrics and complexity analysis
   - Keep Mermaid diagrams synchronized with actual code structure
   - Update file statistics table when files are added/removed/modified

2. **Structure Change Management**:
   - When adding new classes/functions: Update the detailed directory structure
   - When modifying APIs: Update the data flow sequence diagrams  
   - When changing dependencies: Update the component architecture diagram
   - When adding features: Update the deployment architecture if needed

3. **Cross-File Coordination Rules**:
   - Backend changes MUST be coordinated with frontend updates
   - API endpoint changes REQUIRE corresponding frontend API call updates
   - Data model changes MUST update both backend classes AND frontend interfaces
   - New backend features REQUIRE corresponding test coverage
   - Database schema changes MUST update both backend models AND frontend types

4. **API Documentation Sync**:
   - Keep API endpoint documentation in sync with actual FastAPI routes
   - Update request/response examples when data models change
   - Maintain accurate HTTP method and URL path documentation
   - Document new query parameters, request bodies, and response formats
   - Update error response documentation when adding new validation

5. **Mermaid Diagram Maintenance**:
   - Update codebase structure diagram when files/folders change
   - Update data flow diagram when API endpoints change
   - Update component architecture when dependencies change
   - Ensure line numbers in diagrams match actual code
   - Keep color coding and visual hierarchy consistent

6. **Development Workflow**:
   - BEFORE making changes: Review current architecture.md
   - DURING implementation: Keep notes of structural changes
   - AFTER changes: Update architecture.md with precise line numbers
   - VERIFY: Ensure diagrams accurately reflect new code structure
   - TEST: Validate that documented flows match actual implementation

7. **Documentation Quality Standards**:
   - Use exact line number references (e.g., "Lines 25-30:")
   - Include function signatures with parameter types
   - Maintain consistent emoji and visual formatting
   - Keep code complexity ratings up to date
   - Update technical metrics (lines of code, function counts, etc.)

8. **Feature Implementation Protocol**:
   - Phase 1: Backend foundation (models, business logic)
   - Phase 2: API layer (endpoints, validation)  
   - Phase 3: Frontend integration (state, API calls)
   - Phase 4: UI/UX enhancement (components, styling)
   - Phase 5: Testing & validation (unit, integration)
   - Phase 6: Documentation update (architecture.md)

## Code Organization Principles

1. **File Structure Integrity**:
   - Keep related functionality grouped in logical modules
   - Maintain clear separation between backend, frontend, and tests
   - Use consistent naming conventions across all files
   - Keep demo/tutorial code separate from production code

2. **Import Management**:
   - Update imports when moving functions between files
   - Maintain clean dependency graphs
   - Avoid circular imports between modules
   - Keep external dependencies minimal and well-documented

## Tools
- we use `uv`. eg `uv pip install -e ".[dev]"`
- we use `ty` instead of mypy for type checking
- After EACH edit you ALWAYS execute the command `ty check . --verbose` to check the code and inspect the output
- we use `uv pip compile` ! to generate the requirements.txt file

## Python Standards
- Python 3.12 with modern typing
- Use type annotations and Pydantic V2
- Follow black and ruff linting guidelines from pyproject.toml
- create correctly typed functions and classes that are MyPy compliant
- Do not use old typing syntax like `Any`, `Dict`, `List`, etc. Use the modern versions from the typing module.
- NEVER add USELESS comments to the code. NO commens that are perfectly expressed by one line of code !!!
- Examples files that use a class are great (examples folder)
- POCs are great
- but NEVER simplify an example/POC to the point that it is mocking the functionality we are trying to demonstrate!

## IMPORTANT DEVELOPMENT RULE:
- NEVER use raw dictionaries for structured data that could benefit from a Pydantic model
  - Always use these Pydantic models for type safety, validation, and better IDE support
- logging is done with loguru. avoid using print statements for logging
- Never use empty catch all except blocks!
- when asked to check coverage, run the current test file and output the coverage report for the tested file
  - example: `pytest -v tests/integration/test_mongo_tool_creation_integration.py --cov=app.chat.llamchat.mongo_tool --cov-report term-missing`

- DO share your concerns about to formatting of the files you are working on with me!
  - I want to avoid deviating from our standards.
  - I want to avoid the new code to be of lesser quality than the existing code.


consider context managers when writing code that needs to be cleaned up
context managers are AWESOME!

## logging
- don't use print for logging
- use the logger: from commons.logger import sentry_logger as logger
