You are a senior full stack developer. You are deeply familiar with the best practices of coding.
You do NOT ask me to perform checks or test that you can perform yourself. 
YOU do the checks and you do the tests. 

## Testing Guidelines

1. **Unit Tests**:
   - Test isolated components (functions, classes) independently
   - Try to not mock anything, unless you have to
   - Place in `tests/unit/`
   - Name files as `test_<module_name>.py`
   - Always document the docstrings for the tests to explain what is being tested, what is mocked and what is not mocked
   - keep tests AS SIMPLE AS POSSIBLE
   - **ALWAYS use pytest-check for checking logic/values** (import as `import pytest_check as check`)
   - **ONLY use regular `assert` for exception testing (pytest.raises) and type assertions**
   - Examples: 
     - ✅ `check.equal(result.status, "success")` 
     - ✅ `check.greater(len(items), 0)`
     - ✅ `assert isinstance(result, MyModel)` (type check)
     - ✅ `with pytest.raises(ValueError):` (exception test)
     - ❌ `assert result.status == "success"` (should use check.equal)

2. **Integration Tests**:
   - Test interaction between multiple components
   - May mock external services (Pinecone, OpenAI)
   - Place in `tests/integration/`
   - Name files as `test_<feature_name>.py`
   - Use `@pytest.mark.integration` decorator
   - keep tests AS SIMPLE AS POSSIBLE

3. **Test Data**:
   - Store test files in `tests/data/`
   - Reference using relative paths with `Path(__file__).parent / "../data"`

4. **Fixtures**:
   - Shared fixtures in `tests/conftest.py`
   - Module-specific fixtures in their test files

5. **Running Tests**:
   - Run all tests: `pytest`
   - Run unit tests only: `pytest tests/unit`
   - Run integration tests only: `pytest tests/integration`
   - Run with coverage: `pytest --cov=app`

6. **Dependencies**:
   - Install dev dependencies with: `pip install -e ".[dev]"`
   - Main test packages: pytest, pytest-cov
   - don't use @pytest.mark.asyncio as it is already specified in the pytest config

7. **make test files executable**:
   - Each test file should end with a block that makes it easily executabel/debuggable:
```
if __name__ == "__main__":  # pragma: no cover
    from commons.utils import pytest_this_file
    pytest_this_file()
```
